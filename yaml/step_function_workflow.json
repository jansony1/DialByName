{
    "Comment": "Voice Matching Workflow",
    "StartAt": "AudioGeneration",
    "TimeoutSeconds": 3600,
    "States": {
        "AudioGeneration": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "polly-audio-generator-lambda",
                "Payload": {
                    "input_file.$": "$.s3_input_file"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2.0
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "AudioGenerationFailed",
                    "ResultPath": "$.error"
                }
            ],
            "Next": "ChunkAudioFiles",
            "ResultPath": "$.audio_generation_result"
        },
        "AudioGenerationFailed": {
            "Type": "Fail",
            "Cause": "Audio generation failed",
            "Error": "AudioGenerationError"
        },
        "ChunkAudioFiles": {
            "Type": "Pass",
            "Parameters": {
                "chunks.$": "States.ArrayPartition($.audio_generation_result.body.generated_files, 10)"
            },
            "Next": "TranscriptionMap"
        },
        "TranscriptionMap": {
            "Type": "Map",
            "MaxConcurrency": 25,
            "ItemsPath": "$.chunks",
            "ResultPath": "$.transcription_results",
            "Iterator": {
                "StartAt": "ProcessChunk",
                "States": {
                    "ProcessChunk": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "transcribe-audio-lambda",
                            "Payload": {
                                "s3_uris.$": "$$.Map.Item.Value"
                            }
                        },
                        "End": true
                    }
                }
            },
            "Next": "CheckRetries"
        },
        "CheckRetries": {
            "Type": "Pass",
            "Parameters": {
                "retries.$": "States.ArrayFlatten($.transcription_results[*].Payload.body.retryable_uris)"
            },
            "Next": "NeedRetry"
        },
        "NeedRetry": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.retries[0]",
                    "IsPresent": true,
                    "Next": "WaitBeforeRetry"
                }
            ],
            "Default": "ProcessTranscriptions"
        },
        "WaitBeforeRetry": {
            "Type": "Wait",
            "Seconds": 30,
            "Next": "RetryChunks"
        },
        "RetryChunks": {
            "Type": "Pass",
            "Parameters": {
                "chunks.$": "States.ArrayPartition(States.Array($.retries), 10)"
            },
            "Next": "RetryMap"
        },
        "RetryMap": {
            "Type": "Map",
            "MaxConcurrency": 25,
            "ItemsPath": "$.chunks",
            "ResultPath": "$.retry_results",
            "Iterator": {
                "StartAt": "ProcessRetry",
                "States": {
                    "ProcessRetry": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "transcribe-audio-lambda",
                            "Payload": {
                                "s3_uris.$": "$$.Map.Item.Value",
                                "is_retry": true
                            }
                        },
                        "End": true
                    }
                }
            },
            "Next": "CheckRetries"
        },
        "ProcessTranscriptions": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "process-transcriptions-lambda",
                "Payload": {
                    "transcription_results": {
                        "results.$": "States.ArrayGetAll($.transcription_results[*].Payload)"
                    },
                    "retry_results": {
                        "results.$": "States.ArrayGetAll($.retry_results[*].Payload)"
                    }
                }
            },
            "Retry": [
                {
                    "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2.0
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "ProcessTranscriptionsFailed",
                    "ResultPath": "$.error"
                }
            ],
            "End": true
        },
        "ProcessTranscriptionsFailed": {
            "Type": "Fail",
            "Cause": "Processing transcriptions failed",
            "Error": "ProcessingError"
        }
    }
}

{
  "Comment": "Voice Matching Workflow",
  "StartAt": "AudioGeneration",
  "TimeoutSeconds": 3600,
  "States": {
    "AudioGeneration": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PollyAudioGeneratorLambda.Arn}",
        "Payload": {
          "input_file.$": "$.input_file"
        }
      },
      "ResultSelector": {
        "generated_files.$": "$.Payload.body.generated_files"
      },
      "ResultPath": "$.audio_generation",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "AudioGenerationFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "ChunkAudioFiles"
    },
    "AudioGenerationFailed": {
      "Type": "Fail",
      "Cause": "Audio generation failed",
      "Error": "AudioGenerationError"
    },
    "ChunkAudioFiles": {
      "Type": "Pass",
      "Parameters": {
        "chunks.$": "States.ArrayPartition($.audio_generation.generated_files, 10)"
      },
      "Next": "TranscriptionMap"
    },
    "TranscriptionMap": {
      "Type": "Map",
      "MaxConcurrency": 25,
      "ItemsPath": "$.chunks",
      "Parameters": {
        "chunk.$": "$$.Map.Item.Value"
      },
      "Iterator": {
        "StartAt": "ProcessChunk",
        "States": {
          "ProcessChunk": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${TranscribeAudioLambda.Arn}",
              "Payload": {
                "s3_uris.$": "$.chunk"
              }
            },
            "ResultSelector": {
              "completed.$": "$.Payload.body.completed",
              "retryable_uris.$": "$.Payload.body.retryable_uris"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "ResultPath": "$.transcription_results",
      "Next": "CollectResults"
    },
    "CollectResults": {
      "Type": "Pass",
      "Parameters": {
        "completed_transcriptions.$": "$.transcription_results[*].completed",
        "retryable_uris.$": "$.transcription_results[*].retryable_uris"
      },
      "Next": "CheckRetries"
    },
    "CheckRetries": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.retryable_uris",
            "IsNull": true
          },
          "Next": "WaitBeforeRetry"
        }
      ],
      "Default": "ProcessTranscriptions"
    },
    "WaitBeforeRetry": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "PrepareRetryBatches"
    },
    "PrepareRetryBatches": {
      "Type": "Pass",
      "Parameters": {
        "chunks.$": "States.ArrayPartition($.retryable_uris, 10)"
      },
      "Next": "RetryMap"
    },
    "RetryMap": {
      "Type": "Map",
      "MaxConcurrency": 25,
      "ItemsPath": "$.chunks",
      "Parameters": {
        "chunk.$": "$$.Map.Item.Value",
        "is_retry": true
      },
      "Iterator": {
        "StartAt": "ProcessRetry",
        "States": {
          "ProcessRetry": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${TranscribeAudioLambda.Arn}",
              "Payload": {
                "s3_uris.$": "$.chunk",
                "is_retry.$": "$.is_retry"
              }
            },
            "ResultSelector": {
              "completed.$": "$.Payload.body.completed",
              "retryable_uris.$": "$.Payload.body.retryable_uris"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "ResultPath": "$.retry_results",
      "Next": "CollectResults"
    },
    "ProcessTranscriptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessTranscriptionsLambda.Arn}",
        "Payload": {
          "completed_transcriptions.$": "$.completed_transcriptions",
          "retryable_uris.$": "$.retryable_uris"
        }
      },
      "ResultSelector": {
        "result.$": "$.Payload.body.result"
      },
      "ResultPath": "$.final_result",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ProcessTranscriptionsFailed",
          "ResultPath": "$.error"
        }
      ],
      "End": true
    },
    "ProcessTranscriptionsFailed": {
      "Type": "Fail",
      "Cause": "Processing transcriptions failed",
      "Error": "ProcessingError"
    }
  }
}

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Voice Matching Project Infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: VoiceMatchingProject
  ExistingS3BucketName:
    Type: String
    Description: 'Name of the existing S3 bucket to use'
  PythonRuntimeVersion:
    Type: String
    Default: python3.11
  InputPrefix:
    Type: String
    Default: input/
  GeneratedAudioPrefix:
    Type: String
    Default: generated_audio/
  TranscriptionPrefix:
    Type: String
    Default: transcriptions/
  ProcessedDictPrefix:
    Type: String
    Default: processed_dict/

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: VoiceMatchingLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ExistingS3BucketName}
                  - !Sub arn:aws:s3:::${ExistingS3BucketName}/*
              - Effect: Allow
                Action:
                  - transcribe:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - polly:DescribeVoices
                  - polly:SynthesizeSpeech
                Resource: "*"

  VoiceMatchingLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub ${ProjectName}-dependencies
      Description: Dependencies for Voice Matching Project
      Content:
        S3Bucket: !Ref ExistingS3BucketName
        S3Key: lambda_layer.zip
      CompatibleRuntimes:
        - python3.11

  PollyAudioGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-polly-audio-generator
      Runtime: !Ref PythonRuntimeVersion
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Layers:
        - !Ref VoiceMatchingLambdaLayer
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os
          import sys
          import tempfile

          sys.path.append('/opt/python')
          from offline.polly_audio_generator import generate_audio, load_input_data

          def lambda_handler(event, context):
              s3_client = boto3.client('s3')
              polly_client = boto3.client('polly')
              
              try:
                  input_bucket = os.environ['INPUT_BUCKET']
                  input_prefix = os.environ['INPUT_PREFIX']
                  output_bucket = os.environ['OUTPUT_BUCKET']
                  output_prefix = os.environ['OUTPUT_PREFIX']

                  # Print event for debugging
                  print("Event:", json.dumps(event))

                  generated_files = []

                  # Get input file from event
                  input_file = event.get('input_file')
                  if not input_file:
                      raise ValueError("No input_file provided in event")
                  
                  print(f"Processing input file: {input_file}")
                  
                  # Download input file
                  with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as temp_input:
                      s3_client.download_file(input_bucket, input_file, temp_input.name)
                      temp_input_path = temp_input.name

                      # Print input data for debugging
                      input_data = load_input_data(temp_input_path)
                      print("Input data:", json.dumps(input_data))
                      
                      for item in input_data:
                          word = item['word']
                          for lang_code, lang_name in {
                              'en-AU': 'English_Australian',
                              'en-GB': 'English_British',
                              'en-IN': 'English_Indian',
                              'en-NZ': 'English_NewZealand',
                              'en-ZA': 'English_SouthAfrican',
                              'en-US': 'English_US'
                          }.items():
                              # Print current iteration info for debugging
                              print(f"Processing word: {word}, language: {lang_code}")
                              
                              voices = polly_client.describe_voices(LanguageCode=lang_code)['Voices']
                              selected_voices = [voice['Name'] for voice in voices if voice['Gender'] in ['Female', 'Male']][:2]
                              
                              # Print selected voices for debugging
                              print(f"Selected voices for {lang_code}: {selected_voices}")
                              
                              for voice in selected_voices:
                                  # Print parameters before calling generate_audio
                                  print(f"Calling generate_audio with: text={word}, voice_id={voice}, lang_code={lang_code}")
                                  
                                  audio_content = generate_audio(word, voice, lang_code, polly_client)
                                  if audio_content:
                                      filename = f"{word.replace(' ', '_')}_{lang_name}_{voice}.mp3"
                                      output_key = f"{output_prefix}{filename}"
                                      
                                      s3_client.put_object(
                                          Bucket=output_bucket,
                                          Key=output_key,
                                          Body=audio_content
                                      )
                                      generated_files.append(output_key)
                                      print(f"Generated file: {output_key}")

                  return {
                      'statusCode': 200,
                      'body': {
                          'message': 'Audio generation completed',
                          'generated_files': generated_files
                      }
                  }
              except Exception as e:
                  import traceback
                  error_trace = traceback.format_exc()
                  print(f"Error: {str(e)}\nTraceback: {error_trace}")
                  return {
                      'statusCode': 500,
                      'body': {
                          'error': str(e),
                          'traceback': error_trace
                      }
                  }
      Environment:
        Variables:
          INPUT_BUCKET: !Ref ExistingS3BucketName
          INPUT_PREFIX: !Ref InputPrefix
          OUTPUT_BUCKET: !Ref ExistingS3BucketName
          OUTPUT_PREFIX: !Ref GeneratedAudioPrefix
      Timeout: 300
      MemorySize: 512

  TranscribeAudioLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-transcribe-audio
      Runtime: !Ref PythonRuntimeVersion
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Layers:
        - !Ref VoiceMatchingLambdaLayer
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os
          import sys
          from datetime import datetime

          sys.path.append('/opt/python')
          from offline.transcribe_audio import process_batch

          def lambda_handler(event, context):
              try:
                  # Get S3 URIs and retry flag from event
                  s3_uris = event.get('s3_uris', [])
                  is_retry = event.get('is_retry', False)
                  
                  if not s3_uris:
                      raise ValueError("No S3 URIs provided in event")
                  
                  # Print event for debugging
                  print("Event:", json.dumps(event))
                  print(f"Processing {len(s3_uris)} URIs, is_retry={is_retry}")
                  
                  # Ensure we don't process more than 10 files at once
                  if len(s3_uris) > 10:
                      print("Warning: More than 10 URIs provided, truncating to first 10")
                      s3_uris = s3_uris[:10]
                      
                  # Process the batch of URIs
                  results = process_batch(s3_uris, is_retry)
                  
                  # Print results for debugging
                  print("Results:", json.dumps(results))
                  
                  return {
                      'statusCode': 200,
                      'body': {
                          'message': 'Transcription batch processed',
                          'batch_id': results['timestamp'],
                          'completed': results['completed'],
                          'retryable_uris': results['retryable_uris']
                      }
                  }
              except Exception as e:
                  error_msg = str(e)
                  print(f"Error processing batch: {error_msg}")
                  return {
                      'statusCode': 500,
                      'body': {
                          'error': error_msg,
                          'timestamp': datetime.now().strftime('%Y%m%d_%H%M%S')
                      }
                  }
      Environment:
        Variables:
          INPUT_BUCKET: !Ref ExistingS3BucketName
          INPUT_PREFIX: !Ref GeneratedAudioPrefix
          OUTPUT_BUCKET: !Ref ExistingS3BucketName
          OUTPUT_PREFIX: !Ref TranscriptionPrefix
      Timeout: 600
      MemorySize: 1024

  ProcessTranscriptionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-process-transcriptions
      Runtime: !Ref PythonRuntimeVersion
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Layers:
        - !Ref VoiceMatchingLambdaLayer
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os
          import sys
          from datetime import datetime

          sys.path.append('/opt/python')
          from offline.process_transcriptions import process_transcriptions

          def lambda_handler(event, context):
              try:
                  # Get environment variables
                  output_bucket = os.environ['OUTPUT_BUCKET']
                  output_prefix = os.environ['OUTPUT_PREFIX']
                  
                  # Get results from event with new structure
                  transcription_results = event.get('transcription_results', {}).get('results', [])
                  retry_results = event.get('retry_results', {}).get('results', [])
                  
                  # Process transcriptions
                  result = process_transcriptions(
                      transcription_results,
                      retry_results,
                      output_bucket,
                      output_prefix
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': {
                          'message': 'Processing completed',
                          'result': result
                      }
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': {
                          'error': str(e)
                      }
                  }
      Environment:
        Variables:
          INPUT_BUCKET: !Ref ExistingS3BucketName
          INPUT_PREFIX: !Ref TranscriptionPrefix
          OUTPUT_BUCKET: !Ref ExistingS3BucketName
          OUTPUT_PREFIX: !Ref ProcessedDictPrefix
      Timeout: 300
      MemorySize: 512

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionLambdaInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt PollyAudioGeneratorLambda.Arn
                  - !GetAtt TranscribeAudioLambda.Arn
                  - !GetAtt ProcessTranscriptionsLambda.Arn

  VoiceMatchingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${ProjectName}-workflow
      DefinitionString: !Sub |
        {
          "Comment": "Voice Matching Workflow",
          "StartAt": "AudioGeneration",
          "TimeoutSeconds": 3600,
          "States": {
            "AudioGeneration": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PollyAudioGeneratorLambda.Arn}",
                "Payload": {
                  "input_file.$": "$.s3_input_file"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "AudioGenerationFailed",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "ChunkAudioFiles",
              "ResultPath": "$.audio_generation_result"
            },
            "AudioGenerationFailed": {
              "Type": "Fail",
              "Cause": "Audio generation failed",
              "Error": "AudioGenerationError"
            },
            "ChunkAudioFiles": {
              "Type": "Pass",
              "Parameters": {
                "chunks.$": "States.ArrayPartition($.audio_generation_result.body.generated_files, 10)"
              },
              "Next": "TranscriptionMap"
            },
            "TranscriptionMap": {
              "Type": "Map",
              "MaxConcurrency": 25,
              "ItemsPath": "$.chunks",
              "ResultPath": "$.transcription_results",
              "Iterator": {
                "StartAt": "ProcessChunk",
                "States": {
                  "ProcessChunk": {
                    "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${TranscribeAudioLambda.Arn}",
                      "Payload": {
                        "s3_uris.$": "$$.Map.Item.Value"
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 30,
                        "MaxAttempts": 3,
                        "BackoffRate": 2.0
                      }
                    ],
                    "Catch": [
                      {
                        "ErrorEquals": ["States.ALL"],
                        "ResultPath": "$.error",
                        "Next": "HandleChunkError"
                      }
                    ],
                    "Next": "CheckChunkResult"
                  },
                  "CheckChunkResult": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.error",
                        "IsPresent": true,
                        "Next": "HandleChunkError"
                      }
                    ],
                    "Default": "ChunkSuccess"
                  },
                  "HandleChunkError": {
                    "Type": "Pass",
                    "Parameters": {
                      "statusCode": 200,
                      "body": {
                        "completed": {},
                        "retryable_uris.$": "$$.Map.Item.Value"
                      }
                    },
                    "End": true
                  },
                  "ChunkSuccess": {
                    "Type": "Pass",
                    "End": true
                  }
                }
              },
              "Next": "CheckRetries",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "TranscriptionMapFailed",
                  "ResultPath": "$.error"
                }
              ]
            },
            "CheckRetries": {
              "Type": "Pass",
              "Parameters": {
                "retries.$": "States.ArrayFlatten($.transcription_results[*].Payload.body.retryable_uris)"
              },
              "Next": "NeedRetry"
            },
            "NeedRetry": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.retries[0]",
                  "IsPresent": true,
                  "Next": "WaitBeforeRetry"
                }
              ],
              "Default": "ProcessTranscriptions"
            },
            "WaitBeforeRetry": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "RetryChunks"
            },
            "RetryChunks": {
              "Type": "Pass",
              "Parameters": {
                "chunks.$": "States.ArrayPartition(States.Array($.retries), 10)"
              },
              "Next": "RetryMap"
            },
            "RetryMap": {
              "Type": "Map",
              "MaxConcurrency": 25,
              "ItemsPath": "$.chunks",
              "ResultPath": "$.retry_results",
              "Iterator": {
                "StartAt": "ProcessRetry",
                "States": {
                  "ProcessRetry": {
                    "Type": "Task",
                    "Resource": "${TranscribeAudioLambda.Arn}",
                    "Parameters": {
                      "FunctionName": "${TranscribeAudioLambda.Arn}",
                      "Payload": {
                        "s3_uris.$": "$$.Map.Item.Value",
                        "is_retry": true
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 30,
                        "MaxAttempts": 3,
                        "BackoffRate": 2.0
                      }
                    ],
                    "Catch": [
                      {
                        "ErrorEquals": ["States.ALL"],
                        "ResultPath": "$.error",
                        "Next": "HandleRetryError"
                      }
                    ],
                    "Next": "CheckRetryResult"
                  },
                  "CheckRetryResult": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.error",
                        "IsPresent": true,
                        "Next": "HandleRetryError"
                      }
                    ],
                    "Default": "RetrySuccess"
                  },
                  "HandleRetryError": {
                    "Type": "Pass",
                    "Parameters": {
                      "statusCode": 200,
                      "body": {
                        "completed": {},
                        "retryable_uris.$": "$$.Map.Item.Value"
                      }
                    },
                    "End": true
                  },
                  "RetrySuccess": {
                    "Type": "Pass",
                    "End": true
                  }
                }
              },
              "Next": "CheckRetries",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "RetryMapFailed",
                  "ResultPath": "$.error"
                }
              ]
            },
            "ProcessTranscriptions": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessTranscriptionsLambda.Arn}",
                "Payload": {
                  "transcription_results": {
                    "results.$": "States.ArrayGetAll($.transcription_results[*].Payload)"
                  },
                  "retry_results": {
                    "results.$": "States.ArrayGetAll($.retry_results[*].Payload)"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ProcessTranscriptionsFailed",
                  "ResultPath": "$.error"
                }
              ],
              "End": true
            },
            "TranscriptionMapFailed": {
              "Type": "Fail",
              "Cause": "All transcription attempts failed",
              "Error": "TranscriptionMapError"
            },
            "RetryMapFailed": {
              "Type": "Fail",
              "Cause": "All retry attempts failed",
              "Error": "RetryMapError"
            },
            "ProcessTranscriptionsFailed": {
              "Type": "Fail",
              "Cause": "Processing transcriptions failed",
              "Error": "ProcessingError"
            }
          }
        }
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn

  EventBridgeStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeStepFunctionInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref VoiceMatchingStateMachine

  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${ProjectName}-s3-upload-trigger
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref ExistingS3BucketName
          object:
            key:
              - prefix: !Ref InputPrefix
      Targets:
        - Arn: !Ref VoiceMatchingStateMachine
          Id: TriggerStepFunction
          RoleArn: !GetAtt EventBridgeStepFunctionRole.Arn

Outputs:
  StateMachineArn:
    Description: Step Function State Machine
    Value: !Ref VoiceMatchingStateMachine
